package estafet.util;

import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;

import estafet.model.Customer;
import org.apache.commons.beanutils.BeanUtils;

public class ResultSetMapper<T> {
    @SuppressWarnings("unchecked")
    /**
     * The function of the method mapResultSetToObject maps resultSet to an ArrayList of type POJO using Annotations.
     * The core logic of this function is that, it gets the attributes in the outputClass having annotation
     * 'Column'. If this attribute has the 'Column' annotation with 'name' value same as that of SQL column
     * name, the value of the SQL column is set to the current attribute in outputClass.
     * @param rs - Result Set which is generated by executing a statement that queries the database.
     * @param outputClass -  Annotated POJO (Plain Old Java Object) class
     * @return - ArrayList containing POJOs retrieved from DataBase
     */

    public List<T> mapResultSetToObject(ResultSet rs, Class outputClass) {
        List<T> outputList = null;
        try {
            // make sure resultSet is not null
            if (rs != null) {
                // check if outputClass has 'Entity' annotation
                if (outputClass.isAnnotationPresent(Entity.class)) {
                    // get the resultSet metadata
                    ResultSetMetaData resultSetMetaData = rs.getMetaData();
                    // get all the attributes of outputClass
                    Field[] fields = outputClass.getDeclaredFields();
                    while (rs.next()) {
                        T bean = (T) outputClass.newInstance();
                        for (int _iterator = 1; _iterator < resultSetMetaData.getColumnCount(); _iterator++) {
                            // getting the SQL column name
                            String columnName = resultSetMetaData.getColumnName(_iterator);
                            // reading the value of the SQL column
                            Object columnValue = rs.getObject(_iterator);
                            // iterating over outputClass attributes to check if any attribute has 'Column' annotation with matching 'name' value
                            for (Field field : fields) {
                                if (field.isAnnotationPresent(Column.class)) {
                                    Column column = field.getAnnotation(Column.class);
                                    if (column.name().equalsIgnoreCase(columnName)
                                            && columnValue != null) {
                                        BeanUtils.setProperty(bean, field.getName(), columnValue);
                                        break;
                                    }
                                }
                            }
                        }
                        if (outputList == null) {
                            outputList = new ArrayList<T>();
                        }
                        outputList.add(bean);
                    }

                } else {
                    System.out.println("No annotation");
                }
            } else {
                return null;
            }
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (SQLException e) {
            e.printStackTrace();
        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        }
        return outputList;
    }
}